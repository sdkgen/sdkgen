name: release_dev
on:
  push:
    branches:
      - master
jobs:
  _version:
    runs-on: ubuntu-latest
    steps:
      - run: echo -n 0.0.0-dev.$(date -u +'%Y%m%d%H%M%S') > version.txt
      - uses: actions/upload-artifact@v3
        with:
          name: version
          path: version.txt

  parser:
    needs: [_version]
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      - uses: actions/download-artifact@v3
        with:
          name: version
      - uses: actions/setup-node@v3
        with:
          node-version: 16.x
          registry-url: https://registry.npmjs.org
      - run: cp LICENSE parser/
      - run: npm install
        working-directory: ./parser
      - run: |
          npm install -g json && json -I -f package.json -e '
            this.version = "'$(cat ../version.txt)'";
            this.main = "dist/src/index.js";
            this.types = "dist/src/index.d.ts";
            for (const pkg in this.dependencies)
              if (this.dependencies[pkg].startsWith("file:../"))
                this.dependencies[pkg] = this.version;
          '
        working-directory: ./parser
      - run: npm run build
        working-directory: ./parser
      - run: npm publish --tag dev
        working-directory: ./parser
        env:
          NODE_AUTH_TOKEN: ${{ secrets.NPM_AUTH_TOKEN }}

  browser-runtime:
    needs: [_version]
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      - uses: actions/download-artifact@v3
        with:
          name: version
      - uses: actions/setup-node@v3
        with:
          node-version: 16.x
          registry-url: https://registry.npmjs.org
      - run: cp LICENSE browser-runtime/
      - run: npm install
        working-directory: ./browser-runtime
      - run: |
          npm install -g json && json -I -f package.json -e '
            this.version = "'$(cat ../version.txt)'";
            this.main = "dist/src/index.js";
            this.types = "dist/src/index.d.ts";
            for (const pkg in this.dependencies)
              if (this.dependencies[pkg].startsWith("file:../"))
                this.dependencies[pkg] = this.version;
          '
        working-directory: ./browser-runtime
      - run: npm run build
        working-directory: ./browser-runtime
      - run: npm publish --tag dev
        working-directory: ./browser-runtime
        env:
          NODE_AUTH_TOKEN: ${{ secrets.NPM_AUTH_TOKEN }}

  dart-runtime:
    needs: [_version]
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      - uses: actions/download-artifact@v3
        with:
          name: version
      - uses: actions/setup-java@v3
        with:
          java-version: 12.x
          distribution: zulu
      - uses: subosito/flutter-action@v2
        with:
          flutter-version: 3.10.x
          channel: stable
      - run: cp LICENSE dart-runtime/
      - run: flutter pub get
        working-directory: ./dart-runtime
      - run: "sed 's/version: 0.0.0/version: '$(cat ../version.txt)'/' -i pubspec.yaml"
        working-directory: ./dart-runtime
      - run: |
          export PUB_CACHE=$GITHUB_WORKSPACE/pub-cache && \
          mkdir -p $PUB_CACHE && \
          echo "$PUB_CREDENTIALS" > $PUB_CACHE/credentials.json && \
          flutter pub pub publish -v -f
        working-directory: ./dart-runtime
        env:
          PUB_CREDENTIALS: ${{ secrets.PUB_CREDENTIALS }}

  typescript-generator:
    needs: [_version]
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      - uses: actions/download-artifact@v3
        with:
          name: version
      - uses: actions/setup-node@v3
        with:
          node-version: 16.x
          registry-url: https://registry.npmjs.org
      - run: cp LICENSE typescript-generator/
      - run: npm install
        working-directory: ./typescript-generator
      - run: |
          npm install -g json && json -I -f package.json -e '
            this.version = "'$(cat ../version.txt)'";
            this.main = "dist/src/index.js";
            this.types = "dist/src/index.d.ts";
            for (const pkg in this.dependencies)
              if (this.dependencies[pkg].startsWith("file:../"))
                this.dependencies[pkg] = this.version;
          '
        working-directory: ./typescript-generator
      - run: npm run build
        working-directory: ./typescript-generator
      - run: npm publish --tag dev
        working-directory: ./typescript-generator
        env:
          NODE_AUTH_TOKEN: ${{ secrets.NPM_AUTH_TOKEN }}

  csharp-generator:
    needs: [_version]
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      - uses: actions/download-artifact@v3
        with:
          name: version
      - uses: actions/setup-node@v3
        with:
          node-version: 16.x
          registry-url: https://registry.npmjs.org
      - run: cp LICENSE csharp-generator/
      - run: npm install
        working-directory: ./csharp-generator
      - run: |
          npm install -g json && json -I -f package.json -e '
            this.version = "'$(cat ../version.txt)'";
            this.main = "dist/src/index.js";
            this.types = "dist/src/index.d.ts";
            for (const pkg in this.dependencies)
              if (this.dependencies[pkg].startsWith("file:../"))
                this.dependencies[pkg] = this.version;
          '
        working-directory: ./csharp-generator
      - run: npm run build
        working-directory: ./csharp-generator
      - run: npm publish --tag dev
        working-directory: ./csharp-generator
        env:
          NODE_AUTH_TOKEN: ${{ secrets.NPM_AUTH_TOKEN }}

  fsharp-generator:
    needs: [_version]
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      - uses: actions/download-artifact@v3
        with:
          name: version
      - uses: actions/setup-node@v3
        with:
          node-version: 16.x
          registry-url: https://registry.npmjs.org
      - run: cp LICENSE fsharp-generator/
      - run: npm install
        working-directory: ./fsharp-generator
      - run: |
          npm install -g json && json -I -f package.json -e '
            this.version = "'$(cat ../version.txt)'";
            this.main = "dist/src/index.js";
            this.types = "dist/src/index.d.ts";
            for (const pkg in this.dependencies)
              if (this.dependencies[pkg].startsWith("file:../"))
                this.dependencies[pkg] = this.version;
          '
        working-directory: ./fsharp-generator
      - run: npm run build
        working-directory: ./fsharp-generator
      - run: npm publish --tag dev
        working-directory: ./fsharp-generator
        env:
          NODE_AUTH_TOKEN: ${{ secrets.NPM_AUTH_TOKEN }}

  kotlin-generator:
    needs: [_version]
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      - uses: actions/download-artifact@v3
        with:
          name: version
      - uses: actions/setup-node@v3
        with:
          node-version: 16.x
          registry-url: https://registry.npmjs.org
      - run: cp LICENSE kotlin-generator/
      - run: npm install
        working-directory: ./kotlin-generator
      - run: |
          npm install -g json && json -I -f package.json -e '
            this.version = "'$(cat ../version.txt)'";
            this.main = "dist/src/index.js";
            this.types = "dist/src/index.d.ts";
            for (const pkg in this.dependencies)
              if (this.dependencies[pkg].startsWith("file:../"))
                this.dependencies[pkg] = this.version;
          '
        working-directory: ./kotlin-generator
      - run: npm run build
        working-directory: ./kotlin-generator
      - run: npm publish --tag dev
        working-directory: ./kotlin-generator
        env:
          NODE_AUTH_TOKEN: ${{ secrets.NPM_AUTH_TOKEN }}

  swift-generator:
    needs: [_version]
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      - uses: actions/download-artifact@v3
        with:
          name: version
      - uses: actions/setup-node@v3
        with:
          node-version: 16.x
          registry-url: https://registry.npmjs.org
      - run: cp LICENSE swift-generator/
      - run: npm install
        working-directory: ./swift-generator
      - run: |
          npm install -g json && json -I -f package.json -e '
            this.version = "'$(cat ../version.txt)'";
            this.main = "dist/src/index.js";
            this.types = "dist/src/index.d.ts";
            for (const pkg in this.dependencies)
              if (this.dependencies[pkg].startsWith("file:../"))
                this.dependencies[pkg] = this.version;
          '
        working-directory: ./swift-generator
      - run: npm run build
        working-directory: ./swift-generator
      - run: npm publish --tag dev
        working-directory: ./swift-generator
        env:
          NODE_AUTH_TOKEN: ${{ secrets.NPM_AUTH_TOKEN }}

  dart-generator:
    needs: [_version]
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      - uses: actions/download-artifact@v3
        with:
          name: version
      - uses: actions/setup-node@v3
        with:
          node-version: 16.x
          registry-url: https://registry.npmjs.org
      - run: cp LICENSE dart-generator/
      - run: npm install
        working-directory: ./dart-generator
      - run: |
          npm install -g json && json -I -f package.json -e '
            this.version = "'$(cat ../version.txt)'";
            this.main = "dist/src/index.js";
            this.types = "dist/src/index.d.ts";
            for (const pkg in this.dependencies)
              if (this.dependencies[pkg].startsWith("file:../"))
                this.dependencies[pkg] = this.version;
          '
        working-directory: ./dart-generator
      - run: npm run build
        working-directory: ./dart-generator
      - run: npm publish --tag dev
        working-directory: ./dart-generator
        env:
          NODE_AUTH_TOKEN: ${{ secrets.NPM_AUTH_TOKEN }}

  cli:
    needs: [_version]
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      - uses: actions/download-artifact@v3
        with:
          name: version
      - uses: actions/setup-node@v3
        with:
          node-version: 16.x
          registry-url: https://registry.npmjs.org
      - run: cp LICENSE cli/
      - run: npm install
        working-directory: ./cli
      - run: |
          npm install -g json && json -I -f package.json -e '
            this.version = "'$(cat ../version.txt)'";
            this.main = "dist/src/index.js";
            this.types = "dist/src/index.d.ts";
            for (const pkg in this.dependencies)
              if (this.dependencies[pkg].startsWith("file:../"))
                this.dependencies[pkg] = this.version;
          '
        working-directory: ./cli
      - run: npm run build
        working-directory: ./cli
      - run: npm publish --tag dev
        working-directory: ./cli
        env:
          NODE_AUTH_TOKEN: ${{ secrets.NPM_AUTH_TOKEN }}

  playground:
    needs: [_version]
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      - uses: actions/download-artifact@v3
        with:
          name: version
      - uses: actions/setup-node@v3
        with:
          node-version: 16.x
          registry-url: https://registry.npmjs.org
      - run: cp LICENSE playground/
      - run: npm install && npm install -g json && bash .ci.sh
        working-directory: ./playground
      - run: |
          npm install -g json && json -I -f package.json -e '
            this.version = "'$(cat ../version.txt)'";
            delete this.dependencies.tslib;
            for (const pkg in this.dependencies)
              if (this.dependencies[pkg].startsWith("file:../"))
                this.dependencies[pkg] = this.version;
          '
        working-directory: ./playground
      - run: npm run build
        working-directory: ./playground
        env:
          NODE_ENV: production
      - run: sed -i -E 's_(<base href=")/(">)_\1/playground/\2_' dist/index.html
        working-directory: ./playground
      - run: npm publish --tag dev
        working-directory: ./playground
        env:
          NODE_AUTH_TOKEN: ${{ secrets.NPM_AUTH_TOKEN }}

  node-runtime:
    needs: [_version]
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      - uses: actions/download-artifact@v3
        with:
          name: version
      - uses: actions/setup-node@v3
        with:
          node-version: 16.x
          registry-url: https://registry.npmjs.org
      - run: cp LICENSE node-runtime/
      - run: npm install
        working-directory: ./node-runtime
      - run: |
          npm install -g json && json -I -f package.json -e '
            this.version = "'$(cat ../version.txt)'";
            this.main = "dist/src/index.js";
            this.types = "dist/src/index.d.ts";
            for (const pkg in this.dependencies)
              if (this.dependencies[pkg].startsWith("file:../"))
                this.dependencies[pkg] = this.version;
          '
        working-directory: ./node-runtime
      - run: npm run build
        working-directory: ./node-runtime
      - run: npm publish --tag dev
        working-directory: ./node-runtime
        env:
          NODE_AUTH_TOKEN: ${{ secrets.NPM_AUTH_TOKEN }}

  dotnet-runtime:
    needs: [_version]
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      - uses: actions/download-artifact@v3
        with:
          name: version
      - uses: actions/setup-dotnet@v2
        with:
          dotnet-version: 5.0.x
      - uses: actions/setup-node@v3
        with:
          node-version: 16.x
      - run: cp LICENSE dotnet-runtime/runtime
      - run: npm install && npm install -g json && bash .ci.sh
        working-directory: ./playground
      - run: npm run build
        working-directory: ./playground
        env:
          NODE_ENV: production
      - run: dotnet pack -c:Release -p:PackageVersion=$(cat ../../version.txt)
        working-directory: ./dotnet-runtime/runtime
      - run: dotnet nuget push bin/**/*.nupkg -k $NUGET_TOKEN -s https://api.nuget.org/v3/index.json
        working-directory: ./dotnet-runtime/runtime
        env:
          NUGET_TOKEN: ${{ secrets.NUGET_TOKEN }}

  android-runtime:
    needs: [_version]
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      - uses: actions/download-artifact@v3
        with:
          name: version
      - run: sed -i -e "s/versionName \"1.0\"/versionName \"$(cat ../../version.txt)\"/g" build.gradle
        working-directory: ./android-runtime/runtime
      - run: sed -i -e "s/versionCode 1/versionCode $(date +%s)/g" build.gradle
        working-directory: ./android-runtime/runtime
      - run: sed -i -e "s/PUBLISH_VERSION = \'0.0.0\'/PUBLISH_VERSION = \'$(cat ../../version.txt)\'/g" build.gradle
        working-directory: ./android-runtime/runtime
      - run: sed -i -e "s/version = \"0.0.0\"/version = \"$(cat ../version.txt)\"/g" build.gradle
        working-directory: ./android-runtime/
      - run: echo "SONATYPE_NEXUS_USERNAME=${{ secrets.NEXUS_MAVEN_USER }}" >> local.properties
        working-directory: ./android-runtime/
      - run: echo "SONATYPE_NEXUS_PASSWORD=${{ secrets.NEXUS_MAVEN_PASSWORD }}" >> local.properties
        working-directory: ./android-runtime/
      - run: echo "signing.keyId=${{ secrets.MAVEN_GPG_KEY_ID }}" >> local.properties
        working-directory: ./android-runtime/
      - run: echo "signing.password=${{ secrets.MAVEN_GPG_KEY_PASSWORD }}" >> local.properties
        working-directory: ./android-runtime/
      - run: echo "signing.secretKeyRingFile=${{ secrets.MAVEN_GPG_KEY_FILE_PATH }}" >> local.properties
        working-directory: ./android-runtime/
      - run: echo "${{ secrets.MAVEN_GPG_FILE_CONTENT }}" | base64 -d > "${{ secrets.MAVEN_GPG_KEY_FILE_PATH }}"
        working-directory: ./android-runtime/runtime/
      - uses: actions/setup-java@v3
        with:
          distribution: 'adopt'
          java-version: '11'
      - uses: gradle/wrapper-validation-action@v1
      - run: ./gradlew publishToSonatype closeAndReleaseSonatypeStagingRepository
        working-directory: ./android-runtime
