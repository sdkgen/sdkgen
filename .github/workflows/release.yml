name: release
on:
  release:
    types: [published]
jobs:

  parser:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v2
    - uses: actions/setup-node@v1
      with:
        registry-url: https://registry.npmjs.org
    - run: npm install
      working-directory: ./parser
    - run: |
        npm install -g json && json -I -f package.json -e '
          this.version = "${{ github.ref }}".replace("refs/tags/", "");
          this.main = "dist/src/index.js";
          this.types = "dist/src/index.d.ts";
          for (const pkg in this.dependencies)
            if (this.dependencies[pkg].startsWith("file:../"))
              this.dependencies[pkg] = this.version;
        '
      working-directory: ./parser
    - run: npm run build
      working-directory: ./parser
    - run: npm publish
      working-directory: ./parser
      env:
        NODE_AUTH_TOKEN: ${{ secrets.NPM_AUTH_TOKEN }}

  browser-runtime:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v2
    - uses: actions/setup-node@v1
      with:
        registry-url: https://registry.npmjs.org
    - run: npm install
      working-directory: ./browser-runtime
    - run: |
        npm install -g json && json -I -f package.json -e '
          this.version = "${{ github.ref }}".replace("refs/tags/", "");
          this.main = "dist/src/index.js";
          this.types = "dist/src/index.d.ts";
          for (const pkg in this.dependencies)
            if (this.dependencies[pkg].startsWith("file:../"))
              this.dependencies[pkg] = this.version;
        '
      working-directory: ./browser-runtime
    - run: npm run build
      working-directory: ./browser-runtime
    - run: npm publish
      working-directory: ./browser-runtime
      env:
        NODE_AUTH_TOKEN: ${{ secrets.NPM_AUTH_TOKEN }}

  dart-runtime:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v2
    - uses: actions/setup-java@v1
      with:
        java-version: 12.x
    - uses: subosito/flutter-action@v1
      with:
        channel: stable
    - run: flutter pub get
      working-directory: ./dart-runtime
    - run: "sed 's/version: 0.0.0/version: '$(echo \"${{ github.ref }}\" | cut -d'/' -f3)'/' -i pubspec.yaml"
      working-directory: ./dart-runtime
    - run: mkdir -p $PUB_CACHE && echo "$PUB_CREDENTIALS" > $PUB_CACHE/credentials.json && flutter pub pub publish -v -f
      working-directory: ./dart-runtime
      env:
        PUB_CACHE: ../pub-cache
        PUB_CREDENTIALS: ${{ secrets.PUB_CREDENTIALS }}

  typescript-generator:
    needs: [parser]
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v2
    - uses: actions/setup-node@v1
      with:
        registry-url: https://registry.npmjs.org
    - run: npm install
      working-directory: ./typescript-generator
    - run: |
        npm install -g json && json -I -f package.json -e '
          this.version = "${{ github.ref }}".replace("refs/tags/", "");
          this.main = "dist/src/index.js";
          this.types = "dist/src/index.d.ts";
          for (const pkg in this.dependencies)
            if (this.dependencies[pkg].startsWith("file:../"))
              this.dependencies[pkg] = this.version;
        '
      working-directory: ./typescript-generator
    - run: npm run build
      working-directory: ./typescript-generator
    - run: npm publish
      working-directory: ./typescript-generator
      env:
        NODE_AUTH_TOKEN: ${{ secrets.NPM_AUTH_TOKEN }}

  csharp-generator:
    needs: [parser]
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v2
    - uses: actions/setup-node@v1
      with:
        registry-url: https://registry.npmjs.org
    - run: npm install
      working-directory: ./csharp-generator
    - run: |
        npm install -g json && json -I -f package.json -e '
          this.version = "${{ github.ref }}".replace("refs/tags/", "");
          this.main = "dist/src/index.js";
          this.types = "dist/src/index.d.ts";
          for (const pkg in this.dependencies)
            if (this.dependencies[pkg].startsWith("file:../"))
              this.dependencies[pkg] = this.version;
        '
      working-directory: ./csharp-generator
    - run: npm run build
      working-directory: ./csharp-generator
    - run: npm publish
      working-directory: ./csharp-generator
      env:
        NODE_AUTH_TOKEN: ${{ secrets.NPM_AUTH_TOKEN }}

  kotlin-generator:
    needs: [parser]
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v2
    - uses: actions/setup-node@v1
      with:
        registry-url: https://registry.npmjs.org
    - run: |
        npm install -g json && json -I -f package.json -e '
          this.version = "${{ github.ref }}".replace("refs/tags/", "");
          this.main = "dist/src/index.js";
          this.types = "dist/src/index.d.ts";
          for (const pkg in this.dependencies)
            if (this.dependencies[pkg].startsWith("file:../"))
              this.dependencies[pkg] = this.version;
        '
      working-directory: ./kotlin-generator
    - run: npm install
      working-directory: ./kotlin-generator
    - run: npm run build
      working-directory: ./kotlin-generator
    - run: npm publish
      working-directory: ./kotlin-generator
      env:
        NODE_AUTH_TOKEN: ${{ secrets.NPM_AUTH_TOKEN }}

  dart-generator:
    needs: [parser]
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v2
    - uses: actions/setup-node@v1
      with:
        registry-url: https://registry.npmjs.org
    - run: npm install
      working-directory: ./dart-generator
    - run: |
        npm install -g json && json -I -f package.json -e '
          this.version = "${{ github.ref }}".replace("refs/tags/", "");
          this.main = "dist/src/index.js";
          this.types = "dist/src/index.d.ts";
          for (const pkg in this.dependencies)
            if (this.dependencies[pkg].startsWith("file:../"))
              this.dependencies[pkg] = this.version;
        '
      working-directory: ./dart-generator
    - run: npm run build
      working-directory: ./dart-generator
    - run: npm publish
      working-directory: ./dart-generator
      env:
        NODE_AUTH_TOKEN: ${{ secrets.NPM_AUTH_TOKEN }}

  cli:
    needs: [parser, typescript-generator, dart-generator]
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v2
    - uses: actions/setup-node@v1
      with:
        registry-url: https://registry.npmjs.org
    - run: npm install
      working-directory: ./cli
    - run: |
        npm install -g json && json -I -f package.json -e '
          this.version = "${{ github.ref }}".replace("refs/tags/", "");
          this.main = "dist/src/index.js";
          this.types = "dist/src/index.d.ts";
          for (const pkg in this.dependencies)
            if (this.dependencies[pkg].startsWith("file:../"))
              this.dependencies[pkg] = this.version;
        '
      working-directory: ./cli
    - run: npm run build
      working-directory: ./cli
    - run: npm publish
      working-directory: ./cli
      env:
        NODE_AUTH_TOKEN: ${{ secrets.NPM_AUTH_TOKEN }}

  playground:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v2
    - uses: actions/setup-node@v1
      with:
        registry-url: https://registry.npmjs.org
    - run: npm install
      working-directory: ./playground
    - run: |
        npm install -g json && json -I -f package.json -e '
          this.version = "${{ github.ref }}".replace("refs/tags/", "");
          this.main = "dist/src/index.js";
          this.types = "dist/src/index.d.ts";
          for (const pkg in this.dependencies)
            if (this.dependencies[pkg].startsWith("file:../"))
              this.dependencies[pkg] = this.version;
        '
      working-directory: ./playground
    - run: npm run build
      working-directory: ./playground
      env:
        NODE_ENV: production
    - run: npm publish
      working-directory: ./playground
      env:
        NODE_AUTH_TOKEN: ${{ secrets.NPM_AUTH_TOKEN }}

  android-runtime: 
    runs-on: ubuntu-latest
    steps: 
    - uses: actions/checkout@v2
    - run: sed -i -e "s/versionName \"1.0\"/versionName $(echo \"${{ github.ref }}\" | cut -d'/' -f3)/g" build.gradle
      working-directory: ./android-runtime/runtime
    - run: sed -i -e "s/versionCode 1/versionCode $(date +%s)/g" build.gradle
      working-directory: ./android-runtime/runtime
    - uses: giorgosneokleous93/docker-multicommand-android@v1.0.0
      with: 
        workingdir: "./android-runtime/"
        command1: "./gradlew test install bintrayUpload"
      env: 
        BINTRAY_USER: ${{ secrets.BINTRAY_USER }}
        BINTRAY_API_KEY: ${{ secrets.BINTRAY_API_KEY }}
        
  node-runtime:
    needs: [parser, typescript-generator, kotlin-generator, dart-generator, playground]
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v2
    - uses: actions/setup-node@v1
      with:
        registry-url: https://registry.npmjs.org
    - run: npm install
      working-directory: ./node-runtime
    - run: |
        npm install -g json && json -I -f package.json -e '
          this.version = "${{ github.ref }}".replace("refs/tags/", "");
          this.main = "dist/src/index.js";
          this.types = "dist/src/index.d.ts";
          for (const pkg in this.dependencies)
            if (this.dependencies[pkg].startsWith("file:../"))
              this.dependencies[pkg] = this.version;
        '
      working-directory: ./node-runtime
    - run: npm run build
      working-directory: ./node-runtime
    - run: npm publish
      working-directory: ./node-runtime
      env:
        NODE_AUTH_TOKEN: ${{ secrets.NPM_AUTH_TOKEN }}

  dotnetcore-runtime:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v2
    - uses: actions/download-artifact@v1
      with:
        name: version
    - uses: actions/setup-dotnet@v1
    - uses: actions/setup-node@v1
    - run: npm install
      working-directory: ./playground
    - run: npm run build
      working-directory: ./playground
      env:
        NODE_ENV: production
    - run: dotnet pack -c:Release -p:PackageVersion=$(echo \"${{ github.ref }}\" | cut -d'/' -f3)
      working-directory: ./dotnetcore-runtime
    - run: dotnet nuget push bin/**/*.nupkg -k $NUGET_TOKEN -s https://api.nuget.org/v3/index.json
      working-directory: ./dotnetcore-runtime
      env:
        NUGET_TOKEN: ${{ secrets.NUGET_TOKEN }}
